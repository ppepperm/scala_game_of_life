[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Pepperm\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Pepperm\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.6 (Amazon.com Inc. Java 11.0.20)
[debug]       Load.loadUnit: plugins took 60.4135ms
[debug]       Load.loadUnit: defsScala took 0.1527ms
[debug] [Loading] Scanning directory C:\Users\Pepperm\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Pepperm\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 8.2699 ms
[debug]           Load.resolveProject(global-plugins) took 27.2476ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Pepperm\.sbt\1.0\plugins, plugins: List(<none>))) took 51.6291ms
[debug] [Loading] Done in C:\Users\Pepperm\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 66.1002ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1282ms
[debug]     Load.loadUnit(file:/C:/Users/Pepperm/.sbt/1.0/plugins/, ...) took 132.3919ms
[debug]   Load.apply: load took 261.3542ms
[debug]   Load.apply: resolveProjects took 3.9462ms
[debug]   Load.apply: finalTransforms took 36.0029ms
[debug]   Load.apply: config.delegates took 6.154ms
[debug]   Load.apply: Def.make(settings)... took 313.7687ms
[debug]   Load.apply: structureIndex took 73.866ms
[debug]   Load.apply: mkStreams took 2.1306ms
[info] loading global plugins from C:\Users\Pepperm\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1535.5641ms
[debug]           Load.loadUnit: plugins took 13.6894ms
[debug]           Load.loadUnit: defsScala took 0.0022ms
[debug] [Loading] Scanning directory C:\Users\Pepperm\IdeaProjects\game_of_life\project
[debug]             Load.loadUnit: mkEval took 4.6952ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Pepperm\IdeaProjects\game_of_life\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 0.9796 ms
[info] loading settings for project game_of_life-build from idea1.sbt ...
[debug]               Load.resolveProject(game_of_life-build) took 3.0265ms
[debug]             Load.loadTransitive: finalizeProject(Project(id game_of_life-build, base: C:\Users\Pepperm\IdeaProjects\game_of_life\project, plugins: List(<none>))) took 4.3623ms
[debug] [Loading] Done in C:\Users\Pepperm\IdeaProjects\game_of_life\project, returning: (game_of_life-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1600.3868ms
[debug]           Load.loadUnit: cleanEvalClasses took 2.8807ms
[debug]         Load.loadUnit(file:/C:/Users/Pepperm/IdeaProjects/game_of_life/project/, ...) took 1617.5385ms
[debug]       Load.apply: load took 1618.3673ms
[debug]       Load.apply: resolveProjects took 0.085ms
[debug]       Load.apply: finalTransforms took 6.3383ms
[debug]       Load.apply: config.delegates took 0.3379ms
[debug]       Load.apply: Def.make(settings)... took 45.2131ms
[debug]       Load.apply: structureIndex took 18.1641ms
[debug]       Load.apply: mkStreams took 0.0037ms
[info] loading project definition from C:\Users\Pepperm\IdeaProjects\game_of_life\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3024.816ms
[debug]     Load.loadUnit: defsScala took 0.0019ms
[debug] [Loading] Scanning directory C:\Users\Pepperm\IdeaProjects\game_of_life
[debug]       Load.loadUnit: mkEval took 0.1367ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 0.9894 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 17.7468ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Pepperm\IdeaProjects\game_of_life, plugins: List(<none>))) took 19.6912ms
[debug] [Loading] Done in C:\Users\Pepperm\IdeaProjects\game_of_life, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1171.6189ms
[debug]     Load.loadUnit: cleanEvalClasses took 5.934ms
[debug]   Load.loadUnit(file:/C:/Users/Pepperm/IdeaProjects/game_of_life/, ...) took 4202.8036ms
[debug] Load.apply: load took 4203.8744ms
[debug] Load.apply: resolveProjects took 0.0843ms
[debug] Load.apply: finalTransforms took 17.2289ms
[debug] Load.apply: config.delegates took 0.2229ms
[debug] Load.apply: Def.make(settings)... took 61.0846ms
[debug] Load.apply: structureIndex took 12.3453ms
[debug] Load.apply: mkStreams took 0.0022ms
[info] set current project to game_of_life (in build file:/C:/Users/Pepperm/IdeaProjects/game_of_life/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 59021 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 59021, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to game_of_life (in build file:/C:/Users/Pepperm/IdeaProjects/game_of_life/)
[debug] > Exec(idea-shell, None, None)
